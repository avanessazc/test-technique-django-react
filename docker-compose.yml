version: "3.8"
services:
  server:
    build: ./server
    ports:
      - "8000:8000"
    container_name: server_c
    volumes:
      - type: bind
        source: ./server/
        target: /usr/src/app/
    restart: unless-stopped
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
    # command: python3 manage.py runserver 0.0.0.0:8000
    command: tail -f /dev/null
    networks:
      - internal
  react:
    build: ./front
    ports:
      - "3000:3000"
    container_name: reactjs_c
    networks:
      - internal
    environment:
      - REACT_APP_SERVER_ENDPOINT=${SERVER_ENDPOINT}
    volumes:
      - type: bind
        source: ./front/src
        target: /usr/src/app/front/src
      - type: bind
        source: ./front/public
        target: /usr/src/app/front/public
    restart: unless-stopped
    command: tail -f /dev/null
    # command: npm run start

  postgres:
    image: postgres:alpine
    container_name: postgres_c
    networks:
      - internal
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  dbadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - internal
    ports:
      - 5050:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}

networks:
  internal:
    driver: bridge

volumes:
  pgdata:
    driver: local
